#+title: Literature alerts with OpenAlex
#+author: John Kitchin
#+date: [2024-01-15 Mon]

This is a project to use https://openalex.org to create literature alerts. It creates an RSS feed and a results file with recently created entries. It also creates a GitHUB issue assigned to me, which notifies me when new entries are added.

You specify queries in this yaml file: [[./queries.yml]]

There is a Python package in [[./src/litalerts/]] that provides a CLI called ~litalerts~. That script is run on a schedule set by [[./.github/workflows/scheduled.yml]].

The results are written to the [[./org]] directory as org-files and it generates RSS feeds at [[./rss]].

Here are some examples of what you might do with this:

1. Replace Google/Scopus/Pubmed alerts (see https://github.com/jkitchin/literature-alerts/blob/main/org/CO2RR.org)
2. Replace the Web Of Science report on citations to your work (see https://github.com/jkitchin/literature-alerts/blob/main/org/New-citations-for-John-Kitchin.org)
3. Find out when a group of people publish something new (e.g. the CMU Chemical Engineering Department https://github.com/jkitchin/literature-alerts/blob/main/org/CMU-Chemical-Engineering.org)
4. Get all new articles from a specific journal (see https://github.com/jkitchin/literature-alerts/blob/main/org/ACS-Catalysis.org)

How do you use this? I have not developed the best way to use this myself yet. Here are some ways I think you could do it. 

1. You could probably subscribe to the repo and get notified of updates.
2. In your browser go to one of the org-files, e.g. https://github.com/jkitchin/literature-alerts/blob/main/org/water-splitting.org, and see if you want to do anything with the results. They get replaced every time the script runs. 
3. Subscribe to the rss feed and consume it as you see fit.
4. Clone the repo and open [[./org/water-splitting.org]] in Emacs. Interact with it as you see fit, e.g. refile entries, etc. It might be tricky to add notes, keep it running etc. There might be some git-fu, e.g. branching, etc. that makes it practical. I am still working out these kinds of details.

In Emacs you can set up elfeed like this with these RSS feeds:

#+BEGIN_SRC emacs-lisp :results silent
(require 'elfeed)
(setq elfeed-feeds '("https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/water-splitting.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/CO2RR.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/authors.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/high-entropy-oxides.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/liquid-metal.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/ACS-Catalysis.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/CMU-Chemical-Engineering.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/New-citations-for-John-Kitchin.xml"))
(elfeed-update)
(elfeed)
#+END_SRC

Or go to some site like https://rssviewer.app/, paste in one of those urls, and click on view feed.

This is still a work in progress. Something not working? Feature requests? Post an issue at https://github.com/jkitchin/literature-alerts/issues.

* How does it work?

I use GitHUB Actions to run ~litalerts~ on a schedule. This script iterates through [[./queries.yml]] to construct URLs to query https://openalex.org. I use ~from_created_date~ in the filter which requires an OpenAlex premium API key. See https://openalex.org/pricing. OpenAlex gave me a premium API key for academic research. Thanks for that!

The API key is stored as a GitHUB secret so it is accessible to the Action script [[./.github/workflows/scheduled.yml]], but secure. This usually works, but apparently scheduled workflows are not always run on time (https://upptime.js.org/blog/2021/01/22/github-actions-schedule-not-working/). TBD if that is an issue. You can manually trigger the workflow at https://github.com/jkitchin/literature-alerts/actions/workflows/scheduled.yml.

The script generates some files, and I commit them to the repository so it is easy to access them. I might consider an alternative approach based on https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts, or maybe putting them on another branch.


* Want to do it yourself?

You can use this repo as a template: https://github.com/new?template_name=literature-alerts&template_owner=jkitchin

You will want to modify these files:
- [[./queries.yml]] (for the queries you want)
- [[./.github/workflows/scheduled.yml]] (for the schedule you want)

If you want to do this yourself, you will need an OpenAlex premium API key. See https://openalex.org/pricing. Then, you will have to setup a repository secret for ~OPENALEX_API_KEY~ with the key they give you.

In your repo, go to something like  https://github.com/jkitchin/literature-alerts/settings/actions and give actions "Read and write permissions" under "Workflow permissions".


* Wishlist

- Figure out how to assign issues to specific users that are indicated in the queries.yml file. Maybe make an actions.sh file and then execute it later.
- Add delivery methods to yml, email, rss, org, etc.
- Consider pull-requests for other people to make their own queries? Would some constraints be needed? 

* Generating filters

Suppose you want new citations to your papers. I think there is a limit of 50 items in filters, My OpenAlex record lists ~195 records, so I find it convenient to generate the filter strings. Here I retrieve my results, get the id for each one, and then generate the filter queries in groups of 20. Then, you can paste this into the queries.yml file.

Whenever you have new papers that OpenAlex knows about, just rerun this to generate a new set of queries.

#+BEGIN_SRC emacs-lisp :results code :results org
(let* ((entity-id "https://openalex.org/A5003442464")
       (data (oa--author entity-id))
       (works-url (plist-get data :works_api_url))
       (works-data (request-response-data
		    (request works-url
		      :sync t
		      :parser 'oa--response-parser)))
       (meta (plist-get works-data :meta)) 
       (per-page (plist-get meta :per_page))
       (count (plist-get meta :count))
       (pages (/ count per-page))
       (entries '())
       purl)
  ;; if there is a remainder we need to get the rest
  (when (> (mod count per-page) 0) (cl-incf pages))
  
  ;; Now we have to loop through the pages
  (cl-loop for i from 1 to pages
	   do
	   (setq purl (concat works-url (format "&page=%s" i))
		 works-data (request-response-data
			     (request purl
			       :sync t
			       :parser 'oa--response-parser))
		 entries (append entries (plist-get works-data :results))))
  (string-join
   (cl-loop for group in
	    (seq-partition (cl-loop for entry in entries collect (plist-get entry :id)) 25)
	    collect
	    (concat "     - cites:" (string-join group "|")))
   "\n"))
#+END_SRC

#+RESULTS:
#+begin_src org
     - cites:https://openalex.org/W2167035995|https://openalex.org/W2022714449|https://openalex.org/W2133406747|https://openalex.org/W2601081289|https://openalex.org/W1989389325|https://openalex.org/W2069988560|https://openalex.org/W2060064889|https://openalex.org/W1999912925|https://openalex.org/W2797402103|https://openalex.org/W1971294721|https://openalex.org/W2084834275|https://openalex.org/W2307947977|https://openalex.org/W1987036699|https://openalex.org/W2112767720|https://openalex.org/W2034249671|https://openalex.org/W2784356185|https://openalex.org/W2324647124|https://openalex.org/W2333048302|https://openalex.org/W2010104613|https://openalex.org/W2954057334|https://openalex.org/W2330420711|https://openalex.org/W2477507435|https://openalex.org/W2291925970|https://openalex.org/W2461328805|https://openalex.org/W2008361594
     - cites:https://openalex.org/W2050461974|https://openalex.org/W2322629080|https://openalex.org/W902952202|https://openalex.org/W1985477584|https://openalex.org/W2584994763|https://openalex.org/W2759635967|https://openalex.org/W2582607092|https://openalex.org/W3010395573|https://openalex.org/W3168269570|https://openalex.org/W4283809948|https://openalex.org/W1976900809|https://openalex.org/W2040082802|https://openalex.org/W2037319405|https://openalex.org/W2073944544|https://openalex.org/W2005633502|https://openalex.org/W2508686881|https://openalex.org/W2408080617|https://openalex.org/W3041419076|https://openalex.org/W4296545211|https://openalex.org/W1989836155|https://openalex.org/W4378953196|https://openalex.org/W2016136557|https://openalex.org/W1754779462|https://openalex.org/W1989887791|https://openalex.org/W2043756370
     - cites:https://openalex.org/W2326319594|https://openalex.org/W2075123250|https://openalex.org/W2013291890|https://openalex.org/W2076603107|https://openalex.org/W1983211364|https://openalex.org/W2107588036|https://openalex.org/W2321716361|https://openalex.org/W2537005472|https://openalex.org/W2622772233|https://openalex.org/W2782434877|https://openalex.org/W3040935211|https://openalex.org/W2008336692|https://openalex.org/W2024117507|https://openalex.org/W2004889825|https://openalex.org/W2321815843|https://openalex.org/W1999481271|https://openalex.org/W2288114809|https://openalex.org/W2319547265|https://openalex.org/W3149320750|https://openalex.org/W4385584015|https://openalex.org/W2949437120|https://openalex.org/W1991992285|https://openalex.org/W1992013238|https://openalex.org/W2081235356|https://openalex.org/W2036912748
     - cites:https://openalex.org/W2029904786|https://openalex.org/W2564739126|https://openalex.org/W2794932603|https://openalex.org/W3216093002|https://openalex.org/W4205989106|https://openalex.org/W2062213432|https://openalex.org/W2038722478|https://openalex.org/W2346037593|https://openalex.org/W2583989457|https://openalex.org/W2018598173|https://openalex.org/W1976330930|https://openalex.org/W2084630051|https://openalex.org/W2951947955|https://openalex.org/W2038093538|https://openalex.org/W2109577840|https://openalex.org/W2176643401|https://openalex.org/W3209912745|https://openalex.org/W3216263093|https://openalex.org/W4210859464|https://openalex.org/W4290659046|https://openalex.org/W2047252852|https://openalex.org/W2045355650|https://openalex.org/W1884320396|https://openalex.org/W2345885390|https://openalex.org/W2002360200
     - cites:https://openalex.org/W2145750734|https://openalex.org/W1955781951|https://openalex.org/W4322759324|https://openalex.org/W4353007039|https://openalex.org/W4362602338|https://openalex.org/W4366983532|https://openalex.org/W4382651985|https://openalex.org/W4386602600|https://openalex.org/W4386694215|https://openalex.org/W4387438978|https://openalex.org/W4387964204|https://openalex.org/W4388444792|https://openalex.org/W4388537947|https://openalex.org/W4389040448|https://openalex.org/W4389340622|https://openalex.org/W2149995896|https://openalex.org/W4239479870|https://openalex.org/W3021105764|https://openalex.org/W2039786021|https://openalex.org/W1999352645|https://openalex.org/W1862313826|https://openalex.org/W2080142003|https://openalex.org/W2016865072|https://openalex.org/W4230851681|https://openalex.org/W2938683215
     - cites:https://openalex.org/W3197956321|https://openalex.org/W2257333152|https://openalex.org/W2416343268|https://openalex.org/W267007904|https://openalex.org/W1990959822|https://openalex.org/W2051277977|https://openalex.org/W1981454729|https://openalex.org/W2064709553|https://openalex.org/W2157874313|https://openalex.org/W1988714833|https://openalex.org/W1966034750|https://openalex.org/W1988125328|https://openalex.org/W2056516494|https://openalex.org/W2124416649|https://openalex.org/W4200512871|https://openalex.org/W2084199964|https://openalex.org/W2490924609|https://openalex.org/W2258702664|https://openalex.org/W2284265603|https://openalex.org/W2526245028|https://openalex.org/W2908875959|https://openalex.org/W2909439080|https://openalex.org/W2910395843|https://openalex.org/W1661299042|https://openalex.org/W2579856121
     - cites:https://openalex.org/W2593159564|https://openalex.org/W2616197370|https://openalex.org/W2736400892|https://openalex.org/W2737400761|https://openalex.org/W4242085932|https://openalex.org/W2050074768|https://openalex.org/W2287679227|https://openalex.org/W4220985611|https://openalex.org/W4281680351|https://openalex.org/W4283023483|https://openalex.org/W4285900276|https://openalex.org/W2005197721|https://openalex.org/W2514424001|https://openalex.org/W338058020|https://openalex.org/W4237590291|https://openalex.org/W2023154463|https://openalex.org/W2795250219|https://openalex.org/W2992838914|https://openalex.org/W2993324324|https://openalex.org/W3080131370|https://openalex.org/W4244843289|https://openalex.org/W4246990943|https://openalex.org/W4247545658|https://openalex.org/W4253478322|https://openalex.org/W4255008889
     - cites:https://openalex.org/W4255519766|https://openalex.org/W2087480586|https://openalex.org/W1931953664|https://openalex.org/W3040748958|https://openalex.org/W4205946618|https://openalex.org/W4239600023|https://openalex.org/W2333373047|https://openalex.org/W2605616508|https://openalex.org/W4232690322|https://openalex.org/W4232865630|https://openalex.org/W4247596616|https://openalex.org/W4254421699|https://openalex.org/W1964467038|https://openalex.org/W2796291287|https://openalex.org/W2949887176|https://openalex.org/W4244960257|https://openalex.org/W2441997026|https://openalex.org/W2578323605|https://openalex.org/W2951632357|https://openalex.org/W4245313022
#+end_src

Another way to generate features from org-ref citations. Say you want papers that cite or are related to these:

[[cite:&ardagh-2019-princ-dynam;&ardagh-2019-catal-reson-theor;&ardagh-2020-catal-reson-theor;&gopeesingh-2020-reson-promot;&shetty-2020-elect-field]]

First highlight the region, then run the function below. That will copy the necessary ids to the clipboard, and then you can paste them somewhere.


#+BEGIN_SRC emacs-lisp
(defun oa-generate-cites-filter (r1 r2)
  (interactive "r")
  (save-restriction
    (narrow-to-region r1 r2)
    (let* ((links (org-ref-get-cite-links))
	   path
	   references
	   entry
	   (dois '())
	   (oa-ids '())
	   s)
      (cl-loop for link in links do
	       (setq path (org-element-property :path link)
		     data (org-ref-parse-cite-path path)
		     references (plist-get data :references))
	       (cl-loop for reference in references do
			(setq entry (bibtex-completion-get-entry (plist-get reference :key)))
			(pushnew (concat "https://doi.org/" (cdr (assoc "doi" entry))) dois))
	       (cl-loop for doi in dois do
			(let* ((url (concat "https://api.openalex.org/works/" doi))
			       (data (request-response-data
				      (request url
					:sync t
					:parser 'oa--response-parser))))
			  (pushnew (plist-get data :id) oa-ids))))
     
      (setq s (kill-new (string-join oa-ids "|")))
      (message s))))
#+END_SRC

#+RESULTS:
: oa-generate-cites-filter


** Integration with Zotero

You can integrate this with Zotero. A proof of concept script is located at [[./src/litalerts/zotero.py]] and a corresponding yaml file at [[./cmu.yml]]. The only difference in this yaml file is the inclusion of a Zotero id for the user/group to act as, and a tag to add to the created Zotero items. 

You have to go to https://www.zotero.org/settings/keys and create an API key, and save that key as a GitHUB secret called `ZOTERO_API_KEY` for Actions. If you run it locally, you need that environment variable defined.

The package installs a new CLI called lazotero that you run like this:

#+BEGIN_SRC sh
lazotero -f cmu.yml -s 1
#+END_SRC

I don't love the way it works, for example, I could not figure out how to tell if an entry with a DOI/url already exists, so at the moment it only checks for an exact title match to avoid adding duplicates.


See https://www.zotero.org/groups/5480843/openalex-cmu-cheme-faculty for a web-based version of the group.
