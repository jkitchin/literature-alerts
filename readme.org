#+title: Literature alerts with OpenAlex
#+author: John Kitchin
#+date: [2024-01-15 Mon]

This is a project to use https://openalex.org to create literature alerts. It creates an RSS feed and a results file with recently created entries. It also creates a GitHUB issue assigned to me, which notifies me when new entries are added.

You specify queries in this yaml file: [[./queries.yml]]

There is a Python package in [[./src/litalerts/]] that provides a CLI called ~litalerts~. That script is run a schedule set by [[./.github/workflows/scheduled.yml]].

The results are written to the [[./org]] director as org-files and it generates RSS feeds at [[./rss]].

How do you use this? I have not developed the best way to use this myself yet. Here are some ways I think you could do it. 

1. You could probably subscribe to the repo and get notified of updates.
2. In your browser go to one of the org-files, e.g. https://github.com/jkitchin/literature-alerts/blob/main/org/water-splitting.org, and see if you want to do anything with the results. They get replaced every time the script runs. 
3. Subscribe to the rss feed and consume it as you see fit.
4. Clone the repo and open [[./org/water-splitting.org]] in Emacs. Interact with it as you see fit, e.g. refile entries, etc. It might be tricky to add notes, keep it running etc. There might be some git-fu, e.g. branching, etc. that makes it practical. I am still working out these kinds of details.

In Emacs you can set up elfeed like this with these RSS feeds:

#+BEGIN_SRC emacs-lisp :results silent
(require 'elfeed)
(setq elfeed-feeds '("https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/water-splitting.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/CO2RR.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/authors.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/high-entropy-oxides.xml"
		     "https://raw.githubusercontent.com/jkitchin/literature-alerts/main/rss/liquid-metal.xml"))
#+END_SRC

Or go to some site like https://rssviewer.app/, paste in one of those urls, and click on view feed.

This is still a work in progress. Something not working? Feature requests? Post an issue at https://github.com/jkitchin/literature-alerts/issues.

* How does it work?

I use GitHUB Actions to run ~litalerts~ on a schedule. This script iterates through [[./queries.yml]] to construct URLs to query https://openalex.org. I use ~from_created_date~ in the filter which requires an OpenAlex premium API key. See https://openalex.org/pricing. OpenAlex gave me a premium API key for academic research. Thanks for that!

The API key is stored as a GitHUB secret so it is accessible to the Action script [[./.github/workflows/scheduled.yml]], but secure. This usually works, but apparently scheduled workflows are not always run on time (https://upptime.js.org/blog/2021/01/22/github-actions-schedule-not-working/). TBD if that is an issue. You can manually trigger the workflow at https://github.com/jkitchin/literature-alerts/actions/workflows/scheduled.yml.

The script generates some files, and I commit them to the repository so it is easy to access them. I might consider an alternative approach based on https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts, or maybe putting them on another branch.


* Want to do it yourself?

You can use this repo as a template: https://github.com/new?template_name=literature-alerts&template_owner=jkitchin

You will want to modify these files:
- [[./queries.yml]] (for the queries you want)
- [[./.github/workflows/scheduled.yml]] (for the schedule you want)


If you want to do this yourself, you will need an OpenAlex premium API key. See https://openalex.org/pricing. Then, you will have to setup a repository secret for ~OPENALEX_API_KEY~ with the key they give you.

In your repo, go to something like  https://github.com/jkitchin/literature-alerts/settings/actions and give actions "Read and write permissions" under "Workflow permissions".


* Wishlist

- Figure out how to assign issues to specific users that are indicated in the queries.yml file. Maybe make an actions.sh file and then execute it later.
- Add delivery methods to yml, email, rss, org, etc.
- Consider pull-requests for other people to make their own queries? Would some constraints be needed? 

